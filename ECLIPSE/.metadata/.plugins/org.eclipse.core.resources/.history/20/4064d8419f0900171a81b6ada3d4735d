//cubo3D.java

	
	/*  
	 * Propiedades:
	 * 	- Cubo: Basica,  array de dos dimensiones de caracteres, consultable, no modificable,
	 *  
	 * 
	 * Interfaz:
	 * 	- char[][][] getCubo()
	 * 
	 * 
	 * Funcionalidades:
	 * 	- void montaCubo()
	 * 	- void pintaCubo()
	 * 	- void ponFicha(int i, int j, int k, int jugador)
	 * 	- void quitaFicha(int posI, int posJ,int posK, int jug)
	 * 	- boolean validaPonFicha(int posI, int posJ, int posK)
	 * 	- boolean validaQuitaFicha(int posI, int posJ, posK, int jug)
	 * 	- boolean compruebaGanador()
	 * 	- boolean validaPosicion()
	 */


	public class cubo3D {
		
		private char[][][] cubo;

		
		//Constructores
		public cubo3D(){
			cubo= new char[3][3][3];		
		}
		

		
		//Consultores
		public char[][][] getCubo(){
			
			return cubo[][][];
		}
		
		
		
		//Modificadores
		
		
		
		//getPosicionesLibres
		public int getPosicionesLibres(){
			int posiciones=0;
			
			for(int i=0;i<cubo.length;i++){
				
				for(int j=0;j<cubo.length;j++){
					
					for(int k=0;k<cubo.length;k++){
						if(cubo[i][j][k]!='X' && cubo[i][j][k]!='O'){
							posiciones++;
						}
					}
				}
			}			
			return posiciones;
		}
		
		
		//montaCubo
		public void montaCubo(){
			for(int i=0;i<cubo.length;i++){
				
				for(int j=0;j<cubo.length;j++){
					
					for(int k=0;k<cubo.length;k++){
					cubo[i][j][k]=' ';			
					}
				}			
			}
		}
		

		//pintaTablero
		public void pintaCubo(){	
			System.out.println("");
			System.out.println("\t	      ____________");
			System.out.println("\t	     /|          /|");
			System.out.println("\t	    / |         / |");
			System.out.println("\t	   /  |        /  |");
			System.out.println("\t	  /___|_______/   | ");
			System.out.println("\t	  |   |_______|___|  ");
			System.out.println("\t	  |   /       |   / ");
			System.out.println("\t	  |  /        |  / ");
			System.out.println("\t	  | /         | /    ");
			System.out.println("\t	  |/__________|/   \n");
			
			
			System.out.print("\t\t\t\t");														System.out.print("     Profundidad 0");															System.out.print("\t\t\t\t");														System.out.print("     Profundidad 1");																System.out.print("\t\t\t\t");														System.out.print("     Profundidad 2\n");
			System.out.print("\t\t\t\t");			System.out.print("     0");					System.out.print("     1");						System.out.print("     2");					System.out.print("\t\t\t\t");			System.out.print("     0");					System.out.print("     1");						System.out.print("     2");						System.out.print("\t\t\t\t");			System.out.print("     0");					System.out.print("     1");						System.out.print("     2\n");
					
			System.out.print("\t\t\t\t");			System.out.print("   _____");				System.out.print(  " _____");				System.out.print(" _____");						System.out.print("\t\t\t\t");			System.out.print("   _____");				System.out.print(  " _____");				System.out.print(" _____");							System.out.print("\t\t\t\t");			System.out.print("   _____");				System.out.print(  " _____");				System.out.print(" _____\n");								
			System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |");						System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |");							System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |\n");								
			System.out.print("\t\t\t\t0");			System.out.print(" |  "+cubo[0][0][0]+"  |");System.out.print("  "+cubo[0][0][1]+"  |");System.out.print("  "+cubo[0][0][2]+"  |");		System.out.print("\t\t\t\t0");			System.out.print(" |  "+cubo[1][0][0]+"  |");System.out.print("  "+cubo[1][0][1]+"  |");System.out.print("  "+cubo[1][0][2]+"  |");			System.out.print("\t\t\t\t0");			System.out.print(" |  "+cubo[2][0][0]+"  |");System.out.print("  "+cubo[2][0][1]+"  |");System.out.print("  "+cubo[2][0][2]+"  |\n");							
			System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|");						System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|");							System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|\n");							
									
			System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |");						System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |");							System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |\n");									
			System.out.print("\t\t\t\t1");			System.out.print(" |  "+cubo[0][1][0]+"  |");System.out.print("  "+cubo[0][1][1]+"  |");System.out.print("  "+cubo[0][1][2]+"  |");		System.out.print("\t\t\t\t1");			System.out.print(" |  "+cubo[1][1][0]+"  |");System.out.print("  "+cubo[1][1][1]+"  |");System.out.print("  "+cubo[1][1][2]+"  |");			System.out.print("\t\t\t\t1");			System.out.print(" |  "+cubo[2][1][0]+"  |");System.out.print("  "+cubo[2][1][1]+"  |");System.out.print("  "+cubo[2][1][2]+"  |\n");							
			System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|");						System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|");							System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|\n");											
												
			System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |");						System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |");							System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |\n");											
			System.out.print("\t\t\t\t2");			System.out.print(" |  "+cubo[0][2][0]+"  |");System.out.print("  "+cubo[0][2][1]+"  |");System.out.print("  "+cubo[0][2][2]+"  |");		System.out.print("\t\t\t\t2");			System.out.print(" |  "+cubo[1][2][0]+"  |");System.out.print("  "+cubo[1][2][1]+"  |");System.out.print("  "+cubo[1][2][2]+"  |");			System.out.print("\t\t\t\t2");			System.out.print(" |  "+cubo[2][2][0]+"  |");System.out.print("  "+cubo[2][2][1]+"  |");System.out.print("  "+cubo[2][2][2]+"  |\n");			
			System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|");						System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|");							System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|\n");	
			
		
			/*for(int i=0;i<3;i++){
				System.out.println("\n");
				System.out.print("\t\t\t\t");			System.out.print("     0");					System.out.print("     1");						System.out.print("     2\n");					
				
				System.out.print("\t\t\t\t");			System.out.print("   _____");				System.out.print(  " _____");				System.out.print(" _____\n");							
				System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |\n");						
				System.out.print("\t\t\t\t0");		System.out.print(" |  "+cubo[i][0][0]+"  |");System.out.print("  "+cubo[i][0][1]+"  |");System.out.print("  "+cubo[i][0][2]+"  |\n");			
				System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|\n");				
										
				System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |\n");						
				System.out.print("\t\t\t\t1");		System.out.print(" |  "+cubo[i][1][0]+"  |");System.out.print("  "+cubo[i][1][1]+"  |");System.out.print("  "+cubo[i][1][2]+"  |\n");			
				System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|\n");						
													
				System.out.print("\t\t\t\t");			System.out.print("  |     |");				System.out.print("     |");					System.out.print("     |\n");						
				System.out.print("\t\t\t\t2");		System.out.print(" |  "+cubo[i][2][0]+"  |");System.out.print("  "+cubo[i][2][1]+"  |");System.out.print("  "+cubo[i][2][2]+"  |\n");			
				System.out.print("\t\t\t\t");			System.out.print("  |_____|");				System.out.print("_____|");					System.out.print("_____|\n");				
			}*/
			
		}

			
		//ponFicha
		public void ponFicha(String icadena,String jcadena, String kcadena, int jugador){		
			int i,j,k;
			i=Integer.parseInt(icadena);
			j=Integer.parseInt(jcadena);
			k=Integer.parseInt(kcadena);
			
			if(! validaPonFicha(icadena,jcadena,kcadena)){			
				System.out.println("La posicion está ocupada!!");					
			}else{			
				switch(jugador){
					case 1: cubo[i][j][k]='X';
					break;
					
					case 2: cubo[i][j][k]='O';
					break;
				}
			}
		}
		
		
		//quitaFicha
		public void quitaFicha(String posI,String posJ, String posK, int jug){			
			int i,j,k;
			i=Integer.parseInt(posI);
			j=Integer.parseInt(posJ);
			k=Integer.parseInt(posK);
			
			if(validaQuitaFicha(posI,posJ,posK,jug)){
				cubo[i][j][k]=' ';
			}else{
				System.out.println("Mejor no");	
				}
			
		}
		
		
		//validaPosicion
		//Comprueba la posicion elegida
		public boolean validaPosicion(String icadena, String jcadena, String kcadena){
			boolean valida=false,pasa=true;
			int i=-1,j=-1,k=-1;
			
			try{
				i=Integer.parseInt(icadena);
				j=Integer.parseInt(jcadena);
				k=Integer.parseInt(kcadena);				
				}catch(NumberFormatException error){
					System.out.println("Se espera un numero\n");	
					pasa=false;
				}										
			if(pasa){				
				if(i>=0 && i<=2 && j>=0 && j<=2 && k>=0 && k<=2){
					valida=true;
				}
			}
			
			return valida;
		}
		
		
		//validaPonFicha
		//Comprueba que la casilla no esta ocupada cuando se va a poner una ficha
		//precondicion: las Posiciones son validas
		public boolean validaPonFicha(String posI,String posJ, String posK){
			boolean valida=true;
			int i,j,k;
			
			i=Integer.parseInt(posI);
			j=Integer.parseInt(posJ);
			k=Integer.parseInt(posK);
			
			//if(validaPosicion(posI,posJ,posK)){
				if(cubo[i][j][k]=='X' || cubo[i][j][k]=='O' || !validaPosicion(posI,posJ,posK)){
					valida=false;
				}	
			//}
			return valida;
		}
		
		
		//validaQuitaFicha
		//Comprueba que la ficha que se va a quitar es del jugador 
		public boolean validaQuitaFicha(String posI,String posJ, String posK, int jug){
			boolean valida=false;
			int i,j,k;
			i=Integer.parseInt(posI);
			j=Integer.parseInt(posJ);
			k=Integer.parseInt(posK);
			
			//if(validaPosicion(posI,posJ,posK)){
				if(cubo[i][j][k]=='X' && jug==1 || cubo[i][j][k]=='O' && jug==2 ){
					valida=true;
				}	
			//}
			return valida;
		}
			
		
		//compruebaGanador
		public boolean compruebaGanador(){
			boolean ganador=false;
			
			for(int caso=0;caso<16 && !ganador;caso++){
				
				//if(!ganador){
					
					switch(caso){
					
						case 0://Filas de cada parte del cubo
							for(int i=0;i<3;i++){
								for(int j=0;j<3;j++){
									if(cubo[i][j][0]=='X' && cubo[i][j][1]=='X' && cubo[i][j][2]=='X' || cubo[i][j][0]=='O' && cubo[i][j][1]=='O' && cubo[i][j][2]=='O'){
										ganador=true;
									}
								}
							}
						break;
	
						case 1://Columnas de cada parte del cubo
							for(int i=0;i<3;i++){
								for(int j=0;j<3;j++){
									if(cubo[i][0][j]=='X' && cubo[i][1][j]=='X' && cubo[i][2][j]=='X' || cubo[i][0][j]=='O' && cubo[i][1][j]=='O' && cubo[i][2][j]=='O'){
										ganador=true;
									}
								}
							}
						break;
	
						
						case 2://plano, diagonales izqda a dcha
								for(int i=0;i<3;i++){
									if(cubo[i][0][0]=='X' && cubo[i][1][1]=='X' && cubo[i][2][2]=='X' || cubo[i][0][0]=='O' && cubo[i][1][1]=='O' && cubo[i][2][2]=='O'){
										ganador=true;
									}				
								}
						break;	
						
						case 3://plano, diagonales dcha a izqda
								for(int i=0;i<3;i++){
									if(cubo[i][2][0]=='X' && cubo[i][1][1]=='X' && cubo[i][0][2]=='X' || cubo[i][2][0]=='O' && cubo[i][1][1]=='O' && cubo[i][0][2]=='O'){
										ganador=true;
									}				
								}
						break;										
						
						case 4://profundidad, va comprobando fila por fila y columna por columna de cada parte del cubo
								for(int i=0;i<3;i++){
									for(int j=0;j<3;j++){
										if(cubo[0][j][i]=='X' && cubo[1][j][i]=='X' && cubo[2][j][i]=='X' || cubo[0][j][i]=='O' && cubo[1][j][i]=='O' && cubo[2][j][i]=='O'){
											ganador=true;
										}
									}
								}
						break;
						
						case 5://profundidad, arriba a abajo, izq a dcha diagonal cruzada 
								if(cubo[0][0][0]=='X' && cubo[1][1][1]=='X' && cubo[2][2][2]=='X' || cubo[0][0][0]=='O' && cubo[1][1][1]=='O' && cubo[2][2][2]=='O'){
									ganador=true;
								}
						break;
						
						case 6://profundidad, abajo a arriba, izq a dcha diagonal cruzada 
								if(cubo[0][2][0]=='X' && cubo[1][1][1]=='X' && cubo[2][0][2]=='X' || cubo[0][2][0]=='O' && cubo[1][1][1]=='O' && cubo[2][0][2]=='O'){
									ganador=true;
								}
						break;
	
						case 7://profundidad, arriba a abajo, dcha a izq diagonal cruzada 
								if(cubo[0][0][2]=='X' && cubo[1][1][1]=='X' && cubo[2][2][0]=='X' || cubo[0][0][2]=='O' && cubo[1][1][1]=='O' && cubo[2][2][0]=='O' ){
									ganador=true;
								}
						break;
	
						case 8://profundidad, abajo a arriba, dcha a izq diagonal cruzada 
								if(cubo[0][2][2]=='X' && cubo[1][1][1]=='X' && cubo[2][0][0]=='X' || cubo[0][2][2]=='O' && cubo[1][1][1]=='O' && cubo[2][0][0]=='O' ){
									ganador=true;
								}
						break;					
	
						case 9://profundidad, frente al fondo de izq a dcha en diagonal horizontal
								for(int i=0;i<3;i++){
									if(cubo[0][i][0]=='X' && cubo[1][i][1]=='X' && cubo[2][i][2]=='X' || cubo[0][i][0]=='O' && cubo[1][i][1]=='O' && cubo[2][i][2]=='O' ){
										ganador=true;
									}
								}
						break;
						
						case 10://profundidad, frente al fondo de dcha a izq en diagonal horizontal
								for(int i=0;i<3;i++){
									if(cubo[0][i][2]=='X' && cubo[1][i][1]=='X' && cubo[2][i][0]=='X' || cubo[0][i][2]=='O' && cubo[1][i][1]=='O' && cubo[2][i][0]=='O'  ){
										ganador=true;
									}
								}
						break;
						
						case 11://profundidad, frente al fondo de arriba a abajo en diagonal vertical 
								for(int i=0;i<3;i++){
									if(cubo[0][0][i]=='X' && cubo[1][1][i]=='X' && cubo[2][2][i]=='X' || cubo[0][0][i]=='O' && cubo[1][1][i]=='O' && cubo[2][2][i]=='O'){
										ganador=true;
									}
								}
						break;
						
						case 12://profundidad, frente al fondo de abajo a arriba en diagonal vertical
							for(int i=0;i<3;i++){
								if(cubo[0][2][i]=='X' && cubo[1][1][i]=='X' && cubo[2][0][i]=='X' || cubo[0][2][i]=='O' && cubo[1][1][i]=='O' && cubo[2][0][i]=='O' ){
									ganador=true;
								}
							}
					break;

						
					}//Fin SEGUN
				//}//Fin SI no hay ganador
			}//Fin PARA
					
			return ganador;
		}
		
		
		
		
		
		

		
		
}
